func {{ specialization.signature }} {
        {{ specialization.setup }}
        {{ "initalVertexIndex"|GOAL_TEST }}

        var visited: [Bool] = [Bool](repeating: false, count: graph.vertexCount)
        let container = {{ algorithm.createContainer }}

        visited[initalVertexIndex] = true
        let neighbours = graph.edgesForIndex(initalVertexIndex)
        for e in neighbours {
            if !visited[e.v] {
                {{ "e"|PUSH_TO_CONTAINER }}
              {% if algorithm.markAsVisitedOnPush %}
                visited[e.v] = true
              {% endif %}
            }
        }

        while !container.isEmpty {
            let edge: E = container.pop()
            let v = edge.v
            
          {% if not algorithm.markAsVisitedOnPush %}
            if visited[v] {
                continue
            }
            visited[v] = true   
          {% endif %}

          {% if specialization.prunningReducer %}
            let shouldVisitNeighbours = {{ "edge"|REDUCER }}
          {% else %}
            {{ "edge"|REDUCER }}
          {% endif %}

            {{ "v"|GOAL_TEST }}

          {% if specialization.prunningReducer %}
            if shouldVisitNeighbours {
          {% endif %}

                let neighbours = graph.edgesForIndex(v)
                for e in neighbours {
                    if !visited[e.v] {
                        {{ "e"|PUSH_TO_CONTAINER }}
                      {% if algorithm.markAsVisitedOnPush %}
                        visited[e.v] = true
                      {% endif %}
                    }
                }

          {% if specialization.prunningReducer %}
            }
          {% endif %}
        }
        {{ specialization.retrn }}
    }

